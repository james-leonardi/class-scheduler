package scheduler.forms;

import scheduler.forms.EventPanel;
import scheduler.FileManager;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Home extends javax.swing.JFrame {

    private FileManager fm;

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        try {
            fm = new FileManager(true);
        } catch (IOException io) {
            JOptionPane.showMessageDialog(null, "Terminal error has occurred. Program will now exit.");
            System.exit(1);
        }
        updateList();
    }

    public javax.swing.JLabel getHeader() {
        return studentName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        studentSelect = new javax.swing.JComboBox<>();
        newButton = new javax.swing.JButton();
        studentName = new javax.swing.JLabel();
        scrollablePane = new javax.swing.JScrollPane();
        overview = new javax.swing.JList<>();
        newEventButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        dropStudent = new javax.swing.JButton();
        dataFolder = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        studentFiles = new javax.swing.JComboBox<>();
        openFileButton = new javax.swing.JButton();
        deleteFileButton = new javax.swing.JButton();
        renameFileButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        attachFileButton = new javax.swing.JButton();
        refreshFileButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Organizer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("/images/icon.png")).getImage());
        setResizable(false);

        studentSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select..." }));
        studentSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSelectActionPerformed(evt);
            }
        });

        newButton.setText("Add New...");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        studentName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        studentName.setText("Select a Class");

        overview.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        scrollablePane.setViewportView(overview);

        newEventButton.setText("New Event");
        newEventButton.setPreferredSize(new java.awt.Dimension(80, 20));
        newEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEventButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove Event");
        removeButton.setPreferredSize(new java.awt.Dimension(80, 20));
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit Event");
        editButton.setPreferredSize(new java.awt.Dimension(80, 20));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        dropStudent.setText("Drop Class");
        dropStudent.setPreferredSize(new java.awt.Dimension(100, 20));
        dropStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropStudentActionPerformed(evt);
            }
        });

        dataFolder.setText("Load New Data");
        dataFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataFolderActionPerformed(evt);
            }
        });

        fileLabel.setText("Class Files");

        openFileButton.setText("Open File");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        deleteFileButton.setText("Delete File");
        deleteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFileButtonActionPerformed(evt);
            }
        });

        renameFileButton.setText("Rename File");
        renameFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameFileButtonActionPerformed(evt);
            }
        });

        attachFileButton.setText("Attach New File to This Class");
        attachFileButton.setActionCommand("Attach New File to This Class");
        attachFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachFileButtonActionPerformed(evt);
            }
        });

        refreshFileButton.setText("Refresh Files");
        refreshFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(studentSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newButton)
                        .addGap(18, 18, 18)
                        .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(dataFolder))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(studentFiles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(attachFileButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(refreshFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(openFileButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(renameFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fileLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(newEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dropStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(studentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dataFolder))
                    .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentSelect, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFileButton)
                    .addComponent(studentFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renameFileButton)
                    .addComponent(deleteFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attachFileButton)
                    .addComponent(refreshFileButton))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        String s = JOptionPane.showInputDialog("Enter new class name");
        if (s != null && s.matches("^[A-Za-z _0-9]+") && !s.equals("Select a Class")) {
            File newStudent = new File(fm.getDataFolder() + "/" + s);
            if (!newStudent.exists()) {
                newStudent.mkdirs();
                newStudent = new File(fm.getDataFolder() + "/" + s + "/_files");
                newStudent.mkdirs();
                newStudent = new File(fm.getDataFolder() + "/" + s + "/events.txt");
                try {
                    newStudent.createNewFile();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error has occurred while adding new class.");
                }
            }
            updateList();
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void newEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEventButtonActionPerformed
        // TODO add your handling code here:
        if (!studentName.getText().equals("Select a Class")) {
            scheduler.forms.EventPanel panel = new scheduler.forms.EventPanel();
            Object[] opts = {"Done"};
            int unused = JOptionPane.showOptionDialog(this, panel, "Create New Event", JOptionPane.PLAIN_MESSAGE, JOptionPane.PLAIN_MESSAGE, null, opts, opts[0]);
            if (unused == JOptionPane.OK_OPTION) {
                try {
                    String desc = panel.getDescription();
                    String type = panel.getEventType();
                    int[] date = panel.getDate();
                    File events = new File(fm.getDataFolder() + "/" + studentName.getText() + "/events.txt");
                    String write = "\n" + type + ": " + date[0] + " " + date[1] + " " + date[2] + " | " + desc;
                    try {
                        Files.write(Paths.get(events.toURI()), write.getBytes(), StandardOpenOption.APPEND);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Failed to write to file. Please try again.");
                    }
                    updateOverview();
                } catch (NullPointerException formNotFilledOut) {
                    //Form was not filled out, nothing to handle
                }
            }
        }
    }//GEN-LAST:event_newEventButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        try {
            removeLineFromCurrentFile(overview.getSelectedValue());
        } catch (IOException error) {
            JOptionPane.showMessageDialog(this, "Failed to remove event. Please try again.");
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void studentSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSelectActionPerformed
        if (studentSelect.getSelectedItem() == null || studentSelect.getSelectedItem().toString().equals("Select...")) {
            studentName.setText("Select a Class");
            try {
                generateOverview();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Failed to generate overview. Is there a problem with the files?");
            }
        } else {
            studentName.setText(studentSelect.getSelectedItem().toString());
            updateOverview();
        }
        updateFileList();
    }//GEN-LAST:event_studentSelectActionPerformed

    private void dropStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropStudentActionPerformed
        // TODO add your handling code here:
        if (!studentName.getText().equals("Select a Class")) {
            int choice = JOptionPane.showOptionDialog(null, "Are you sure you would like to drop " + studentName.getText() + "?", "Drop Class",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (choice == JOptionPane.YES_OPTION) {
                File toDelete = new File(fm.getDataFolder() + "/" + studentName.getText());
                deleteFile(toDelete);
                updateList();
            }
        }
    }//GEN-LAST:event_dropStudentActionPerformed

    private void dataFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataFolderActionPerformed
        try {
            fm = new FileManager(false);
        } catch (IOException ignored) {
            //handled by FileManager
        }
    }//GEN-LAST:event_dataFolderActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        if (!studentName.getText().equals("Select a Class") && !overview.isSelectionEmpty()) {
            scheduler.forms.EventPanel panel = new EventPanel();
            try {
                panel.setDescription(overview.getSelectedValue().split(" \\| ")[1]);
            } catch (Exception e){
                panel.setDescription("");
            }
            panel.setSelectedType(overview.getSelectedValue().split("\\: ")[0]);
            String[] mdy = overview.getSelectedValue().split("\\: ")[1].split(" \\|")[0].split(" ");
            Date insertDate = new Date(Integer.valueOf(mdy[2]) - 1900, Integer.valueOf(mdy[0]) - 1, Integer.valueOf(mdy[1]));
            panel.setDate(insertDate);
            Object[] opts = {"Done"};
            int unused = JOptionPane.showOptionDialog(this, panel, "Create New Event", JOptionPane.PLAIN_MESSAGE, JOptionPane.PLAIN_MESSAGE, null, opts, opts[0]);
            if (unused == JOptionPane.OK_OPTION) {
                try {
                    String desc = panel.getDescription();
                    String type = panel.getEventType();
                    int[] date = panel.getDate();
                    File events = new File(fm.getDataFolder() + "/" + studentName.getText() + "/events.txt");
                    String write = "\n" + type + ": " + date[0] + " " + date[1] + " " + date[2] + " | " + desc;
                    try {
                        removeLineFromCurrentFile(overview.getSelectedValue());
                        Files.write(Paths.get(events.toURI()), write.getBytes(), StandardOpenOption.APPEND);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Error has occurred while editing event");
                    }
                    updateOverview();
                } catch (NullPointerException formNotFilledOut) {
                    //Do nothing
                }
            }
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        if (studentFiles.getSelectedIndex() > -1) {
            try {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(new File(fm.getDataFolder() + "/" + studentName.getText() + "/_files/" + studentFiles.getSelectedItem()));
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Failed to open the file. Please try again.");
            }
        }
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void deleteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFileButtonActionPerformed
        if (!studentName.getText().equals("Select a Class")) {
            int choice = JOptionPane.showOptionDialog(null, "Are you sure you would like to delete " + studentFiles.getSelectedItem() + "?", "Delete File",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (choice == JOptionPane.YES_OPTION) {
                File toDelete = new File(fm.getDataFolder() + "/" + studentName.getText() + "/_files/" + studentFiles.getSelectedItem());
                toDelete.delete();
                updateFileList();
            }
        }
    }//GEN-LAST:event_deleteFileButtonActionPerformed

    private void refreshFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFileButtonActionPerformed
        updateFileList();
    }//GEN-LAST:event_refreshFileButtonActionPerformed

    private void renameFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameFileButtonActionPerformed
        if (!studentName.getText().equals("Select a Class")) {
            String s = JOptionPane.showInputDialog("Rename to?");
            if (s != null && s.matches("^[A-Za-z _0-9 .]+")) {
                File rename = new File(fm.getDataFolder() + "/" + studentName.getText() + "/_files/" + studentFiles.getSelectedItem());
                rename.renameTo(new File(fm.getDataFolder() + "/" + studentName.getText() + "/_files/" + s));
                updateFileList();
            }
        }
    }//GEN-LAST:event_renameFileButtonActionPerformed

    private void attachFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachFileButtonActionPerformed
        if (!studentName.getText().equals("Select a Class")) {
            File file = selectWordFile();
            if (file != null) {
                File destination = new File(fm.getDataFolder() + "/" + studentName.getText() + "/_files/" + file.getName());
                if (!destination.exists()) {
                    try {
                        Files.copy(file.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Failed to copy file. Please try again.");
                    }
                    updateFileList();
                } else {
                    JOptionPane.showMessageDialog(this, "A file by that name already exists. Please rename it if you wish to continue.");
                }
            }
        }
    }//GEN-LAST:event_attachFileButtonActionPerformed

    private void updateFileList() {
        studentFiles.removeAllItems();
        if (!studentName.getText().equals("Select a Class")) {
            File dir = new File(fm.getDataFolder() + "/" + studentName.getText() + "/_files/");
            for (File doc : dir.listFiles()) {
                studentFiles.addItem(doc.getName());
            }
        }
    }

    private void updateList() {
        studentSelect.removeAllItems();
        studentSelect.addItem("Select...");
        fm.listCurrentStudents().forEach(student -> studentSelect.addItem(student));
    }

    private void updateOverview() {
        File events = new File(fm.getDataFolder() + "/" + studentName.getText() + "/events.txt");
        try {
            events.createNewFile();
            List<String> lines = Files.readAllLines(events.toPath());
            for (int i = 0; i < lines.size(); i++) {
                if (lines.get(i).isEmpty()) {
                    lines.remove(i); //Ensures no blank lines
                }
            }
            lines = sortByDate(lines);
            DefaultListModel model = new DefaultListModel();
            for (int i = 0; i < lines.size(); i++) {
                model.addElement(lines.get(i));
            }
            overview.setModel(model);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error has occurred while creating new event");
        }
    }

    private File selectWordFile() {
        JFileChooser finder = new JFileChooser();
        //finder.setFileFilter(new FileNameExtensionFilter("Word Files","doc","docx"));
        finder.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = finder.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            return finder.getSelectedFile();
        }
        return null;
    }

    private void removeLineFromCurrentFile(String line) throws IOException {
        File oldEvents = new File(fm.getDataFolder() + "/" + studentName.getText() + "/events.txt");
        File newEvents = new File(fm.getDataFolder() + "/" + studentName.getText() + "/temp.txt");

        BufferedReader in = new BufferedReader(new FileReader(oldEvents));
        PrintWriter out = new PrintWriter(new FileWriter(newEvents));
        String nextLine;

        while ((nextLine = in.readLine()) != null) {
            if (!nextLine.equals(line) && !nextLine.equals("")) {
                out.println(nextLine);
            }
        }

        out.close();
        in.close();

        oldEvents.delete();
        newEvents.renameTo(new File(fm.getDataFolder() + "/" + studentName.getText() + "/events.txt"));

        updateOverview();
    }

    private List<String> sortByDate(List<String> input) {
        List<String> rawDates = new ArrayList<>();
        input.forEach(str -> {
            rawDates.add(str.split("\\: ")[1].split(" \\|")[0]); //extracts raw dates from input in format DD MM YYYY
        });
        List<Integer> formattedDates = new ArrayList<>();
        for (String s : rawDates) {
            String[] date = s.split(" ");
            String element = date[2];
            if (date[0].length() == 1) { //add a 0 if the day is single-digit
                date[0] = ("" + 0) + date[0];
            }
            element += date[0];
            if (date[1].length() == 1) { //add a 0 if the month is single-digit
                date[1] = ("" + 0) + date[1];
            }
            element += date[1];
            formattedDates.add(Integer.valueOf(element));
        }
        formattedDates.sort(Comparator.naturalOrder());
        rawDates.clear();
        for (Integer i : formattedDates) { //back to strings we go
            rawDates.add(String.valueOf(i));
        }
        List<String> sortedDates = new ArrayList<>();
        for (String str : rawDates) {
            String day = str.substring(6, 8);
            String month = str.substring(4, 6);
            String year = str.substring(0, 4);
            if (day.startsWith("0")) {
                day = day.substring(1, 2);
            }
            if (month.startsWith("0")) {
                month = month.substring(1, 2);
            }
            sortedDates.add(month + " " + day + " " + year);
        }
        List<String> ret = new ArrayList<>();
        List<Integer> usedIndexes = new ArrayList<>();
        for (String date : sortedDates) {
            for (int i = 0; i < input.size(); i++) {
                if (input.get(i).contains(date) && !usedIndexes.contains(i)) {
                    usedIndexes.add(i);
                    ret.add(input.get(i));
                }
            }
        }
        return ret;
    }

    private void generateOverview() throws IOException {
        List<String> folders = fm.listCurrentStudents();
        List<String> allEvents = new ArrayList<>();
        for (String student : folders) {
            File events = new File(fm.getDataFolder() + "/" + student + "/events.txt");
            for (String event : Files.readAllLines(events.toPath())) {
                if (!event.isEmpty()) {
                    allEvents.add(student + " \\\\ " + event);
                }
            }
        }
        allEvents = sortByDate(allEvents);
        DefaultListModel model = new DefaultListModel();
        for (int i = 0; i < allEvents.size(); i++) {
            model.addElement(allEvents.get(i));
        }
        overview.setModel(model);
    }

    private void deleteFile(File del) {
        if (del.exists()) {
            File[] files = del.listFiles();
            for (File file : files) {
                if (file.isDirectory()) {
                    deleteFile(file);
                } else {
                    file.delete();
                }
            }
        }
        del.delete();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attachFileButton;
    private javax.swing.JButton dataFolder;
    private javax.swing.JButton deleteFileButton;
    private javax.swing.JButton dropStudent;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton newEventButton;
    private javax.swing.JButton openFileButton;
    private javax.swing.JList<String> overview;
    private javax.swing.JButton refreshFileButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton renameFileButton;
    private javax.swing.JScrollPane scrollablePane;
    private javax.swing.JComboBox<String> studentFiles;
    private javax.swing.JLabel studentName;
    private javax.swing.JComboBox<String> studentSelect;
    // End of variables declaration//GEN-END:variables
}
